using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

[ExecuteInEditMode]
public class Vector3PathFromChildTransforms : MonoBehaviour {

	[SerializeField] Transform localToTransform;
	[SerializeField] bool localCoordinates = false;
	[SerializeField] string nameOfPath = "";
	[ReadOnly] public Vector3PathPosition[] posList;
	bool gizmosEnabled = true;

	float H = -1f, S = 1f, V = 1f;

	public bool CreatePathFromChildren(){
		if(nameOfPath == ""){
			Debug.LogError("No name set for path to be generated by " + gameObject.name);
			Selection.activeGameObject = this.gameObject;
			return false;
		}

		int childrenAmount = transform.childCount;

		if(childrenAmount == 0){
			Debug.LogError("Path needs at least one position " + gameObject.name);
			Selection.activeGameObject = this.gameObject;
			return false;
		}

		Vector3Path newPathObject = ScriptableObject.CreateInstance<Vector3Path>();
		Vector3[] newPath = new Vector3[childrenAmount];

		for(int i = 0; i < childrenAmount; i++){
			newPath[i] = localCoordinates ? localToTransform.InverseTransformPoint(transform.GetChild(i).position) : transform.GetChild(i).position;
		}

		string filePath = "Assets/Scripts/ScriptableObjects/Vector3Paths/" + nameOfPath + (localCoordinates ? "Local" : "World") + ".asset";
		Vector3Path assetCheck = AssetDatabase.LoadAssetAtPath<Vector3Path>(filePath);
		if(assetCheck != null){
			assetCheck.path = newPath;
			assetCheck.localCoordinates = localCoordinates;
			Debug.LogWarning("Override of existing path");
			Selection.activeObject = assetCheck;
		} else {
			newPathObject.path = newPath;
			newPathObject.localCoordinates = localCoordinates;
			AssetDatabase.CreateAsset(newPathObject, filePath);
			Debug.LogWarning("New path created");
			Selection.activeObject = newPathObject;
		}

		return true;
	}

	public void AddPosition(){
		Vector3PathPosition newPos = new GameObject("pos" + transform.childCount).AddComponent<Vector3PathPosition>();
		newPos.transform.parent = transform;
		newPos.father = this;
		newPos.index = posList.Length;
		newPos.transform.position = posList.Length > 0 ? posList[posList.Length-1].transform.position + Vector3.up * 0.4f : transform.position + Vector3.up + Vector3.forward;
		Selection.activeObject = newPos;
		RecolorPathGizmos();
	}

	public void DeletePosition(int index){
		if(index < posList.Length - 1){
			for(int i = index+1; i < posList.Length; i++){
				posList[i].index -= 1;
				posList[i].gameObject.name = "pos" + posList[i].index;
			}
		} else {
			DeleteLastPosition();
			return;
		}
		if(Selection.activeObject == posList[index].gameObject)
			Selection.activeObject = (index - 1 < 0) ? this.gameObject : posList[index-1].gameObject;
		DestroyImmediate(posList[index].gameObject);
		RecolorPathGizmos();
	}

	public void DeleteLastPosition(){
		Vector3PathPosition lastPos = posList[posList.Length-1];
		if(lastPos != null){
			GameObject.DestroyImmediate(lastPos.gameObject);
			RecolorPathGizmos();
		}
	}

	public void DeleteAllPositions(){
		foreach(Vector3PathPosition go in posList){
			GameObject.DestroyImmediate(go.gameObject);
		}
	}
	public void RecolorPathGizmos(){
		int childCount = transform.childCount;
		H = H == -1f ? Random.Range(0f, 1f) : H;
		Color fromColor = Color.HSVToRGB(H, S, V), toColor = Color.HSVToRGB(H + (1f/5f), S, V);
		for(int i = 0; i < childCount; i++){
			transform.GetChild(i).GetComponent<Vector3PathPosition>().gizmoColor = Color.Lerp(fromColor, toColor, (float)i/(float)childCount);
		}
	}

	public Vector3[] GetPath(bool local){
		int childrenAmount = transform.childCount;
		Vector3[] newPath = new Vector3[childrenAmount];

		for(int i = 0; i < childrenAmount; i++){
			newPath[i] = local ? localToTransform.InverseTransformPoint(transform.GetChild(i).position) : transform.GetChild(i).position;
		}

		return newPath;
	}

	public void ToggleGizmos(){
		gizmosEnabled = !gizmosEnabled;
		foreach(Vector3PathPosition v3pp in posList){
			v3pp.ToggleGizmos(gizmosEnabled);
		}
	}

}
